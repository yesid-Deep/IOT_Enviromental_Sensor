#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_log.h"
#include "wifi_prov.h"
#include "i2c_components.h"
#include "mqtt_service.h"

static const char *TAG = "MAIN_APP";

void app_main(void)
{
    app_config_t config = {0}; // La usamos solo para el Wi-Fi

    ESP_LOGI(TAG, "--- INICIO PRUEBA MQTT ESTATICA ---");

    // Paso 1: Conectar a Wi-Fi usando la configuración guardada en NVS
    ESP_LOGI(TAG, "Iniciando provisioning de Wi-Fi...");
    if (provision_start(&config) != ESP_OK) {
        ESP_LOGE(TAG, "Fallo en el provisioning de Wi-Fi. Deteniendo.");
        return;
    }
    ESP_LOGI(TAG, "Wi-Fi conectado a '%s'", config.wifi_ssid);
    
    // Paso 2: Iniciar el servicio MQTT (ahora no necesita parámetros)
    ESP_LOGI(TAG, "Iniciando servicio MQTT...");
    if (mqtt_service_start(&config) != ESP_OK) {
        ESP_LOGE(TAG, "Fallo al iniciar el servicio MQTT.");
        return;
    }

    // Paso 3: Iniciar los sensores
    ESP_LOGI(TAG, "Iniciando sensores...");
    EnvironmentalSensor_t *my_sensor = sensor_init();
    if (my_sensor == NULL) {
        ESP_LOGE(TAG, "Fallo al inicializar los sensores.");
        return;
    }

    // Paso 4: Bucle principal para leer y publicar
    while (1) {
        vTaskDelay(pdMS_TO_TICKS(5000));
        float temp = sensor_get_temperature(my_sensor);
        float press = sensor_get_pressure(my_sensor);
        float hum = sensor_get_humidity(my_sensor);
        
        // Publicar los datos a través de nuestro servicio
        mqtt_service_publish_sensors(temp, press / 100.0, hum); // Enviamos presión en hPa
    }
}
